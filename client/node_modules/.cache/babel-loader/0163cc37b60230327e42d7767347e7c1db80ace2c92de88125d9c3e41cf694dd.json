{"ast":null,"code":"import { ALL_TODO_REQUEST, ALL_TODO_SUCCESS, ALL_TODO_FAIL, TODO_EDIT_FAIL, TODO_EDIT_REQUEST, TODO_EDIT_SUCCESS, TODO_DELETE_FAIL, TODO_DELETE_REQUEST, TODO_DELETE_SUCCESS } from \"../constants/AllTodo\";\nimport { ApolloClient, InMemoryCache, ApolloProvider, gql } from '@apollo/client';\nexport const getProduct = () => async dispatch => {\n  const client = new ApolloClient({\n    uri: 'http://localhost:3004/graphql',\n    cache: new InMemoryCache()\n  });\n  try {\n    dispatch({\n      type: ALL_TODO_REQUEST\n    });\n    const {\n      data\n    } = await client.query({\n      query: gql`\n          query{\n            getAllTodos{\n              title\n              id\n            }\n          }\n          `\n    });\n    dispatch({\n      type: ALL_TODO_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: ALL_TODO_FAIL,\n      payload: error.response.data.message\n    });\n  }\n};\nexport const EditTodo = (edit, editInput) => async dispatch => {\n  console.log(edit, editInput);\n  const client = new ApolloClient({\n    uri: 'http://localhost:3004/graphql',\n    cache: new InMemoryCache()\n  });\n  try {\n    dispatch({\n      type: TODO_EDIT_REQUEST\n    });\n    const {\n      data\n    } = await client.mutate({\n      mutation: gql`\n            mutation{\n              updateTodo(id:${edit},title:\"${editInput}\") {\n                id\n              }\n            }\n            `\n    });\n    dispatch({\n      type: TODO_EDIT_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: TODO_EDIT_FAIL,\n      payload: error.response.data.message\n    });\n  }\n};\nexport const DeleteTodo = (edit, editInput) => {\n  var _s = $RefreshSig$();\n  return _s(async dispatch => {\n    _s();\n    const [deleteTodo, {\n      error\n    }] = useMutation(DELETE_USER_MUTATION);\n    console.log(edit, editInput);\n    const client = new ApolloClient({\n      uri: 'http://localhost:3004/graphql',\n      cache: new InMemoryCache()\n    });\n    try {\n      dispatch({\n        type: TODO_DELETE_REQUEST\n      });\n      const {\n        data\n      } = deleteTodo({\n        variables: {\n          id: id\n        }\n      });\n      dispatch({\n        type: TODO_DELETE_SUCCESS,\n        payload: data\n      });\n    } catch (error) {\n      dispatch({\n        type: TODO_EDIT_FAIL,\n        payload: error.response.data.message\n      });\n    }\n  }, \"NVVy6+5O5VSmm0O4U+zZ9vZQSTE=\", true);\n};","map":{"version":3,"names":["ALL_TODO_REQUEST","ALL_TODO_SUCCESS","ALL_TODO_FAIL","TODO_EDIT_FAIL","TODO_EDIT_REQUEST","TODO_EDIT_SUCCESS","TODO_DELETE_FAIL","TODO_DELETE_REQUEST","TODO_DELETE_SUCCESS","ApolloClient","InMemoryCache","ApolloProvider","gql","getProduct","dispatch","client","uri","cache","type","data","query","payload","error","response","message","EditTodo","edit","editInput","console","log","mutate","mutation","DeleteTodo","deleteTodo","useMutation","DELETE_USER_MUTATION","variables","id"],"sources":["/home/radicalstart/Desktop/todo/src/actions/allProductsAction.js"],"sourcesContent":["\nimport { ALL_TODO_REQUEST,\n    ALL_TODO_SUCCESS,\n    ALL_TODO_FAIL,TODO_EDIT_FAIL,TODO_EDIT_REQUEST,\n    TODO_EDIT_SUCCESS,TODO_DELETE_FAIL,TODO_DELETE_REQUEST,TODO_DELETE_SUCCESS } from \"../constants/AllTodo\";\nimport { ApolloClient, InMemoryCache, ApolloProvider, gql } from '@apollo/client';\n\nexport const getProduct= () => async (dispatch)=>{\n    const client = new ApolloClient({\n        uri: 'http://localhost:3004/graphql',\n        cache: new InMemoryCache(),\n      });\n    try {\n        dispatch({\n            type: ALL_TODO_REQUEST\n        });\n  \n     \n        const {data} = await client\n        .query({\n          query: gql`\n          query{\n            getAllTodos{\n              title\n              id\n            }\n          }\n          `,\n        })\n     \n        dispatch({\n            type:ALL_TODO_SUCCESS,\n            payload: data,\n        })\n    } catch (error) {\n        dispatch({\n            type:ALL_TODO_FAIL,\n            payload: error.response.data.message,\n        })\n    }\n  }; \n\n\n  export const EditTodo= (edit,editInput) => async (dispatch)=>{\n    console.log(edit,editInput)\n    const client = new ApolloClient({\n        uri: 'http://localhost:3004/graphql',\n        cache: new InMemoryCache(),\n      });\n    try {\n        dispatch({\n            type: TODO_EDIT_REQUEST\n        });\n  \n     \n        const {data} = await client\n        .mutate({\n            mutation: gql`\n            mutation{\n              updateTodo(id:${edit},title:\"${editInput}\") {\n                id\n              }\n            }\n            `,\n          })\n     \n        dispatch({\n            type:TODO_EDIT_SUCCESS,\n            payload: data,\n        })\n    } catch (error) {\n        dispatch({\n            type:TODO_EDIT_FAIL,\n            payload: error.response.data.message,\n        })\n    }\n  }; \n  export const DeleteTodo= (edit,editInput) => async (dispatch)=>{\n\n    const [deleteTodo, { error }] = useMutation(DELETE_USER_MUTATION);\n\n    console.log(edit,editInput)\n    const client = new ApolloClient({\n        uri: 'http://localhost:3004/graphql',\n        cache: new InMemoryCache(),\n      });\n    try {\n        dispatch({\n            type: TODO_DELETE_REQUEST\n        });\n  \n     \n        const {data} =   deleteTodo({\n            variables: {\n              id:id\n            },\n          });\n     \n        dispatch({\n            type:TODO_DELETE_SUCCESS,\n            payload: data,\n        })\n    } catch (error) {\n        dispatch({\n            type:TODO_EDIT_FAIL,\n            payload: error.response.data.message,\n        })\n    }\n  }; \n  "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}