{"ast":null,"code":"import { ALL_TODO_REQUEST, ALL_TODO_SUCCESS, ALL_TODO_FAIL, TODO_EDIT_FAIL, TODO_EDIT_REQUEST, TODO_EDIT_SUCCESS } from \"../constants/AllTodo\";\nimport { ApolloClient, InMemoryCache, ApolloProvider, gql } from '@apollo/client';\nexport const getProduct = () => async dispatch => {\n  const client = new ApolloClient({\n    uri: 'http://localhost:3004/graphql',\n    cache: new InMemoryCache()\n  });\n  try {\n    dispatch({\n      type: ALL_TODO_REQUEST\n    });\n    let link = `/api/v2/products`;\n    const {\n      data\n    } = await client.query({\n      query: gql`\n          query{\n            getAllTodos{\n              title\n              id\n            }\n          }\n          `\n    });\n    dispatch({\n      type: ALL_TODO_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: ALL_TODO_FAIL,\n      payload: error.response.data.message\n    });\n  }\n};\nexport const EditTodo = () => async dispatch => {\n  const client = new ApolloClient({\n    uri: 'http://localhost:3004/graphql',\n    cache: new InMemoryCache()\n  });\n  try {\n    dispatch({\n      type: ALL_TODO_REQUEST\n    });\n    let link = `/api/v2/products`;\n    const {\n      data\n    } = await client.query({\n      query: gql`\n          query{\n            getAllTodos{\n              title\n              id\n            }\n          }\n          `\n    });\n    dispatch({\n      type: ALL_TODO_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: ALL_TODO_FAIL,\n      payload: error.response.data.message\n    });\n  }\n};","map":{"version":3,"names":["ALL_TODO_REQUEST","ALL_TODO_SUCCESS","ALL_TODO_FAIL","TODO_EDIT_FAIL","TODO_EDIT_REQUEST","TODO_EDIT_SUCCESS","ApolloClient","InMemoryCache","ApolloProvider","gql","getProduct","dispatch","client","uri","cache","type","link","data","query","payload","error","response","message","EditTodo"],"sources":["/home/radicalstart/Desktop/todo/src/actions/allProductsAction.js"],"sourcesContent":["\nimport { ALL_TODO_REQUEST,ALL_TODO_SUCCESS,ALL_TODO_FAIL,TODO_EDIT_FAIL,TODO_EDIT_REQUEST,TODO_EDIT_SUCCESS } from \"../constants/AllTodo\";\nimport { ApolloClient, InMemoryCache, ApolloProvider, gql } from '@apollo/client';\n\nexport const getProduct= () => async (dispatch)=>{\n    const client = new ApolloClient({\n        uri: 'http://localhost:3004/graphql',\n        cache: new InMemoryCache(),\n      });\n    try {\n        dispatch({\n            type: ALL_TODO_REQUEST\n        });\n  \n       let link = `/api/v2/products`;\n    \n        const {data} = await client\n        .query({\n          query: gql`\n          query{\n            getAllTodos{\n              title\n              id\n            }\n          }\n          `,\n        })\n     \n        dispatch({\n            type:ALL_TODO_SUCCESS,\n            payload: data,\n        })\n    } catch (error) {\n        dispatch({\n            type:ALL_TODO_FAIL,\n            payload: error.response.data.message,\n        })\n    }\n  }; \n  export const EditTodo= () => async (dispatch)=>{\n    const client = new ApolloClient({\n        uri: 'http://localhost:3004/graphql',\n        cache: new InMemoryCache(),\n      });\n    try {\n        dispatch({\n            type: ALL_TODO_REQUEST\n        });\n  \n       let link = `/api/v2/products`;\n    \n        const {data} = await client\n        .query({\n          query: gql`\n          query{\n            getAllTodos{\n              title\n              id\n            }\n          }\n          `,\n        })\n     \n        dispatch({\n            type:ALL_TODO_SUCCESS,\n            payload: data,\n        })\n    } catch (error) {\n        dispatch({\n            type:ALL_TODO_FAIL,\n            payload: error.response.data.message,\n        })\n    }\n  }; \n  "],"mappings":"AACA,SAASA,gBAAgB,EAACC,gBAAgB,EAACC,aAAa,EAACC,cAAc,EAACC,iBAAiB,EAACC,iBAAiB,QAAQ,sBAAsB;AACzI,SAASC,YAAY,EAAEC,aAAa,EAAEC,cAAc,EAAEC,GAAG,QAAQ,gBAAgB;AAEjF,OAAO,MAAMC,UAAU,GAAE,MAAM,MAAOC,QAAQ,IAAG;EAC7C,MAAMC,MAAM,GAAG,IAAIN,YAAY,CAAC;IAC5BO,GAAG,EAAE,+BAA+B;IACpCC,KAAK,EAAE,IAAIP,aAAa;EAC1B,CAAC,CAAC;EACJ,IAAI;IACAI,QAAQ,CAAC;MACLI,IAAI,EAAEf;IACV,CAAC,CAAC;IAEH,IAAIgB,IAAI,GAAI,kBAAiB;IAE5B,MAAM;MAACC;IAAI,CAAC,GAAG,MAAML,MAAM,CAC1BM,KAAK,CAAC;MACLA,KAAK,EAAET,GAAI;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,CAAC,CAAC;IAEFE,QAAQ,CAAC;MACLI,IAAI,EAACd,gBAAgB;MACrBkB,OAAO,EAAEF;IACb,CAAC,CAAC;EACN,CAAC,CAAC,OAAOG,KAAK,EAAE;IACZT,QAAQ,CAAC;MACLI,IAAI,EAACb,aAAa;MAClBiB,OAAO,EAAEC,KAAK,CAACC,QAAQ,CAACJ,IAAI,CAACK;IACjC,CAAC,CAAC;EACN;AACF,CAAC;AACD,OAAO,MAAMC,QAAQ,GAAE,MAAM,MAAOZ,QAAQ,IAAG;EAC7C,MAAMC,MAAM,GAAG,IAAIN,YAAY,CAAC;IAC5BO,GAAG,EAAE,+BAA+B;IACpCC,KAAK,EAAE,IAAIP,aAAa;EAC1B,CAAC,CAAC;EACJ,IAAI;IACAI,QAAQ,CAAC;MACLI,IAAI,EAAEf;IACV,CAAC,CAAC;IAEH,IAAIgB,IAAI,GAAI,kBAAiB;IAE5B,MAAM;MAACC;IAAI,CAAC,GAAG,MAAML,MAAM,CAC1BM,KAAK,CAAC;MACLA,KAAK,EAAET,GAAI;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,CAAC,CAAC;IAEFE,QAAQ,CAAC;MACLI,IAAI,EAACd,gBAAgB;MACrBkB,OAAO,EAAEF;IACb,CAAC,CAAC;EACN,CAAC,CAAC,OAAOG,KAAK,EAAE;IACZT,QAAQ,CAAC;MACLI,IAAI,EAACb,aAAa;MAClBiB,OAAO,EAAEC,KAAK,CAACC,QAAQ,CAACJ,IAAI,CAACK;IACjC,CAAC,CAAC;EACN;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}