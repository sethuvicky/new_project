{"ast":null,"code":"import { ALL_TODO_REQUEST, ALL_TODO_SUCCESS, ALL_TODO_FAIL, TODO_EDIT_FAIL, TODO_EDIT_REQUEST, TODO_EDIT_SUCCESS, TODO_DELETE_FAIL, TODO_DELETE_REQUEST, TODO_DELETE_SUCCESS } from \"../constants/AllTodo\";\nimport { ApolloClient, InMemoryCache, ApolloProvider, gql } from '@apollo/client';\nexport const getTodo = userid => async dispatch => {\n  const client = new ApolloClient({\n    uri: 'http://localhost:3004/graphql',\n    cache: new InMemoryCache()\n  });\n  try {\n    dispatch({\n      type: ALL_TODO_REQUEST\n    });\n    const data = await client.query({\n      query: gql`\n          query{\n            getAllTodos(USERId:${userid}) {\n              id\n              title,\n              USERId\n            }\n          }\n          `\n    });\n    console.log(data);\n    dispatch({\n      type: ALL_TODO_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: ALL_TODO_FAIL,\n      payload: error.response.data.message\n    });\n  }\n};\nexport const EditTodo = (edit, editInput) => async dispatch => {\n  console.log(edit, editInput);\n  const client = new ApolloClient({\n    uri: 'http://localhost:3004/graphql',\n    cache: new InMemoryCache()\n  });\n  try {\n    dispatch({\n      type: TODO_EDIT_REQUEST\n    });\n    const {\n      data\n    } = await client.mutate({\n      mutation: gql`\n            mutation{\n              updateTodo(id:${edit},title:\"${editInput}\") {\n                id\n              }\n            }\n            `\n    });\n    console.log(data);\n    dispatch({\n      type: TODO_EDIT_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: TODO_EDIT_FAIL,\n      payload: error.response.data.message\n    });\n  }\n};\nexport const DeleteTodo = id => async dispatch => {\n  // const [deleteTodo, { error }] = useMutation(DELETE_USER_MUTATION);\n\n  const client = new ApolloClient({\n    uri: 'http://localhost:3004/graphql',\n    cache: new InMemoryCache()\n  });\n  try {\n    dispatch({\n      type: TODO_DELETE_REQUEST\n    });\n    const {\n      data\n    } = await client.mutate({\n      mutation: gql`\n          mutation{\n            deleteTodo(id:${id})\n          }\n          `\n    });\n    dispatch({\n      type: TODO_DELETE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: TODO_EDIT_FAIL,\n      payload: error.response.data.message\n    });\n  }\n};","map":{"version":3,"names":["ALL_TODO_REQUEST","ALL_TODO_SUCCESS","ALL_TODO_FAIL","TODO_EDIT_FAIL","TODO_EDIT_REQUEST","TODO_EDIT_SUCCESS","TODO_DELETE_FAIL","TODO_DELETE_REQUEST","TODO_DELETE_SUCCESS","ApolloClient","InMemoryCache","ApolloProvider","gql","getTodo","userid","dispatch","client","uri","cache","type","data","query","console","log","payload","error","response","message","EditTodo","edit","editInput","mutate","mutation","DeleteTodo","id"],"sources":["/home/radicalstart/Desktop/New Folder/client/src/actions/allProductsAction.js"],"sourcesContent":["\nimport { ALL_TODO_REQUEST,\n    ALL_TODO_SUCCESS,\n    ALL_TODO_FAIL,TODO_EDIT_FAIL,TODO_EDIT_REQUEST,\n    TODO_EDIT_SUCCESS,TODO_DELETE_FAIL,TODO_DELETE_REQUEST,TODO_DELETE_SUCCESS } from \"../constants/AllTodo\";\nimport { ApolloClient, InMemoryCache, ApolloProvider, gql } from '@apollo/client';\n\nexport const getTodo= (userid) => async (dispatch)=>{\n    const client = new ApolloClient({\n        uri: 'http://localhost:3004/graphql',\n        cache: new InMemoryCache(),\n      });\n    try {\n        dispatch({\n            type: ALL_TODO_REQUEST\n        });\n  \n     \n        const data = await client\n        .query({\n          query: gql`\n          query{\n            getAllTodos(USERId:${userid}) {\n              id\n              title,\n              USERId\n            }\n          }\n          `,\n        })\n        console.log(data)\n     \n        dispatch({\n            type:ALL_TODO_SUCCESS,\n            payload: data,\n        })\n    } catch (error) {\n        dispatch({\n            type:ALL_TODO_FAIL,\n            payload: error.response.data.message,\n        })\n    }\n  }; \n\n\n  export const EditTodo= (edit,editInput) => async (dispatch)=>{\n    console.log(edit,editInput)\n    const client = new ApolloClient({\n        uri: 'http://localhost:3004/graphql',\n        cache: new InMemoryCache(),\n      });\n    try {\n        dispatch({\n            type: TODO_EDIT_REQUEST\n        });\n  \n     \n        const {data} = await client\n        .mutate({\n            mutation: gql`\n            mutation{\n              updateTodo(id:${edit},title:\"${editInput}\") {\n                id\n              }\n            }\n            `,\n          })\n          console.log(data)\n     \n        dispatch({\n            type:TODO_EDIT_SUCCESS,\n            payload: data,\n        })\n    } catch (error) {\n        dispatch({\n            type:TODO_EDIT_FAIL,\n            payload: error.response.data.message,\n        })\n    }\n  }; \n  export const DeleteTodo= (id) => async (dispatch)=>{\n\n    // const [deleteTodo, { error }] = useMutation(DELETE_USER_MUTATION);\n\n    const client = new ApolloClient({\n        uri: 'http://localhost:3004/graphql',\n        cache: new InMemoryCache(),\n      });\n    try {\n        dispatch({\n            type: TODO_DELETE_REQUEST\n        });\n  \n     \n        const {data} = await client\n        .mutate({\n          mutation: gql`\n          mutation{\n            deleteTodo(id:${id})\n          }\n          `,\n        })\n     \n     \n        dispatch({\n            type:TODO_DELETE_SUCCESS,\n            payload: data,\n        })\n    } catch (error) {\n        dispatch({\n            type:TODO_EDIT_FAIL,\n            payload: error.response.data.message,\n        })\n    }\n  }; \n  "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}